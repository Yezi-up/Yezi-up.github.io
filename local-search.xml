<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MongoDB 起步（一）</title>
    <link href="/2020/10/08/MongoDB-%E8%B5%B7%E6%AD%A5%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/10/08/MongoDB-%E8%B5%B7%E6%AD%A5%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-简介"><a href="#MongoDB-简介" class="headerlink" title="MongoDB 简介"></a>MongoDB 简介</h1><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><h1 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h1><ol><li><p>从<a href="https://www.mongodb.com/try/download/community">MongoDB</a>官网下载mongodb,解压到本地文件夹</p></li><li><p>创建目录 <code>data</code> 与<code>log</code></p></li><li><p>新增配置文件</p></li></ol><pre><code class="hljs properties"><span class="hljs-comment"># 数据存放目录</span><span class="hljs-attr">dbpath</span>=<span class="hljs-string">/Users/sure/opt/mongodb-macos-x86_64-4.2.9/data</span><span class="hljs-comment"># 指定端口号</span><span class="hljs-comment"># port=27017</span><span class="hljs-comment"># 指定日志文件</span><span class="hljs-attr">logpath</span>=<span class="hljs-string">/Users/sure/opt/mongodb-macos-x86_64-4.2.9/log/master.log</span><span class="hljs-comment"># 写日志的模式：设置为true为追加，默认覆盖，如未指定启动时将覆盖原日志文件</span><span class="hljs-attr">logappend</span>=<span class="hljs-string">true</span><span class="hljs-comment"># 是否后台执行 默认为false</span><span class="hljs-attr">fork</span>=<span class="hljs-string">true</span><span class="hljs-comment"># 最大连接数</span><span class="hljs-attr">maxConns</span>=<span class="hljs-string">4000</span><span class="hljs-comment"># 用户认证，默认false，不需要认证，进入数据库需要auth认证</span><span class="hljs-comment"># 当数据库没有用户，则不需要验证也可以，创建用户之后都要验证</span><span class="hljs-comment"># auth = true</span></code></pre><ol start="4"><li><p>启动MongoDB,在安装目录下执行 <code>./bin/mongod -f mongo.conf</code></p></li><li><p>连接测试<code>mongo --host 127.0.0.1 --port 27017</code></p></li></ol><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><ol><li><p><code>show dbs</code>查看数据库或者使用<code>show databases</code></p></li><li><p><code>use dbname</code> : 如果数据库不存在则创建数据库，否则切换到数据库</p><p>要求：</p><ul><li><p>不能是空字符串</p></li><li><p>不能含有特殊字符空格，点，$ </p></li><li><p>应该全部小写</p></li><li><p>不超过64字节</p></li></ul><p>默认给我们提供的数据库：</p><ul><li>admin: </li><li>local: 该数据库中的数据不会被复制，集群时不会相互复制</li><li>config：用于分片设置时，用于保存分片的相关信息</li></ul></li><li><p><code>db</code> 查看当前的数据库</p></li><li><p><code>db.dropDataBase</code> 删除数据库</p></li></ol><img src=" https://img.yeziup.com/img/mongodb_1/截屏2020-10-09 下午2.19.13.png" alt="数据库操作" style="zoom:50%;" /><h1 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h1><ol><li>显示创建集合 <code>db.createCollection(&#39;name&#39;)</code></li><li>删除集合<code>db.name.drop()</code></li><li>查看集合<code>show collections</code></li></ol><h1 id="文档CRUD操作"><a href="#文档CRUD操作" class="headerlink" title="文档CRUD操作"></a>文档CRUD操作</h1><ol><li><p>文档插入<code>insert()</code>与<code>save()</code>都可以,这样可以隐式的创建集合class</p><pre><code class="hljs javascript">db.class.insert(&#123;<span class="hljs-string">&quot;classid&quot;</span>:<span class="hljs-string">&quot;001&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;语文&quot;</span>,<span class="hljs-string">&quot;teacher&quot;</span>:<span class="hljs-string">&quot;0001&quot;</span>&#125;)</code></pre></li><li><p>插入多条<code>insertMany()</code>，使用数组插入,批量插入出错时,可以使用trycatch</p><pre><code class="hljs javascript">db.teacher.insertMany([  &#123;<span class="hljs-string">&quot;teacherid&quot;</span>:<span class="hljs-string">&quot;001&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">23</span>&#125;,  &#123;<span class="hljs-string">&quot;teacherid&quot;</span>:<span class="hljs-string">&quot;002&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">24</span>&#125;,])</code></pre></li><li><p>文档查询<code>find()</code></p><pre><code class="hljs javascript"><span class="hljs-comment">// 查询全部</span>db.teacher.find();<span class="hljs-comment">// 条件查询</span>db.teacher.find(&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;lisi&quot;</span>&#125;)<span class="hljs-comment">// 投影查询   查询指定的列后一个参数指定列 1 代表查询  _id 可以通过指定0来排除</span>db.teacher.find(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;lisi&quot;</span>&#125;,&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">_id</span>:<span class="hljs-number">0</span>&#125;);</code></pre></li><li><p>使用try catch  貌似没什么用，需要再查查</p><pre><code class="hljs javascript"><span class="hljs-keyword">try</span>&#123;  db.teacher.insertMany([    &#123;<span class="hljs-string">&quot;teacherid&quot;</span>:<span class="hljs-string">&quot;003&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">23</span>&#125;,    &#123;<span class="hljs-string">&quot;teacherid&quot;</span>:<span class="hljs-string">&quot;004&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhaoliu&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">24</span>&#125;,  ])&#125;<span class="hljs-keyword">catch</span>(e)&#123;  print(<span class="hljs-string">&quot;err:&quot;</span>+e);&#125;</code></pre></li><li><p>更新操作</p><pre><code class="hljs javascript"><span class="hljs-comment">// 语法 db.teacher.update(query,updatedata,option)</span><span class="hljs-comment">// 1. 覆盖修改 直接将对象更新为 第二个参数</span>db.teacher.update(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;,&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">26</span>&#125;)<span class="hljs-comment">// 2. 局部修改 使用$set</span>db.teacher.update(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;,&#123;<span class="hljs-attr">$set</span>:&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">26</span>&#125;&#125;);<span class="hljs-comment">// 3. 批量修改  mongodb 默认只修改匹配的第一条数据  要想修改多条就要使用参数了 option</span>db.teacher.update(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;lisi&quot;</span>&#125;,&#123;<span class="hljs-attr">$set</span>:&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">28</span>&#125;&#125;,&#123;<span class="hljs-attr">multi</span>:<span class="hljs-literal">true</span>&#125;)<span class="hljs-comment">// 4. 列值增长 年龄增长一岁</span>db.teacher.update(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;,&#123;<span class="hljs-attr">$inc</span>:&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">1</span>&#125;&#125;)</code></pre></li><li><p>删除文档</p><pre><code class="hljs javascript"><span class="hljs-comment">//语法 db.teacher.remove(条件)</span><span class="hljs-comment">// 1.全部删除  谨慎使用 </span>db.teacher.remove(&#123;&#125;)<span class="hljs-comment">// 2.条件删除  </span>db.teacher.remove(&#123;<span class="hljs-attr">teacherid</span>:<span class="hljs-string">&quot;003&quot;</span>&#125;)</code></pre></li></ol><h1 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h1><h2 id="1-统计查询"><a href="#1-统计查询" class="headerlink" title="1. 统计查询"></a>1. 统计查询</h2><pre><code class="hljs javascript"><span class="hljs-comment">// 语法 db.teacher.count(query,options)</span><span class="hljs-comment">// 1. 查询全部</span>db.teacher.count()；<span class="hljs-comment">// 2. 条件查询</span>db.teacher.count(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;);</code></pre><h2 id="2-分页查询"><a href="#2-分页查询" class="headerlink" title="2. 分页查询"></a>2. 分页查询</h2><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><span class="hljs-comment">* db.teacher.find().limit().skip()</span><span class="hljs-comment">* limit()读取指定数量的数据 默认20</span><span class="hljs-comment">* skip() 跳过指定数量的数据</span><span class="hljs-comment">*/</span><span class="hljs-comment">// 查询前两条</span>db.teacher.find(&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">24</span>&#125;).limit(<span class="hljs-number">2</span>)<span class="hljs-comment">// 查询第二页</span>db.teacher.find(&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">24</span>&#125;).limit(<span class="hljs-number">2</span>).skip(<span class="hljs-number">2</span>)</code></pre><h2 id="3-排序查询"><a href="#3-排序查询" class="headerlink" title="3. 排序查询"></a>3. 排序查询</h2><p>使用sort()对数据进行排序，sort()中指定排序的字段，用1表示升序 -1表示降序</p><pre><code class="hljs javascript">db.teacher.find().sort(&#123;<span class="hljs-attr">age</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-number">-1</span>&#125;)</code></pre><h1 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h1><h2 id="1-正则查询"><a href="#1-正则查询" class="headerlink" title="1. 正则查询"></a>1. 正则查询</h2><p>Mongodb 支持js中的正则查询</p><pre><code class="hljs javascript">db.teacher.find(&#123;<span class="hljs-attr">name</span>:<span class="hljs-regexp">/zh/</span>&#125;)db.teacher.find(&#123;<span class="hljs-attr">name</span>:<span class="hljs-regexp">/^zh/</span>&#125;)</code></pre><h2 id="2-比较查询"><a href="#2-比较查询" class="headerlink" title="2. 比较查询"></a>2. 比较查询</h2><pre><code class="hljs javascript"><span class="hljs-comment">// 大于  &gt;</span>db.teacher.find(&#123;<span class="hljs-attr">age</span>:&#123;<span class="hljs-attr">$gt</span>:<span class="hljs-number">23</span>&#125;&#125;)<span class="hljs-comment">// 大于等于 &gt;=</span>db.teacher.find(&#123;<span class="hljs-attr">age</span>:&#123;<span class="hljs-attr">$gte</span>:<span class="hljs-number">23</span>&#125;&#125;)<span class="hljs-comment">// 小于 &lt;</span>db.teacher.find(&#123;<span class="hljs-attr">age</span>:&#123;<span class="hljs-attr">$lt</span>:<span class="hljs-number">23</span>&#125;&#125;)<span class="hljs-comment">// 小于等于 &lt;=</span>db.teacher.find(&#123;<span class="hljs-attr">age</span>:&#123;<span class="hljs-attr">$lte</span>:<span class="hljs-number">23</span>&#125;&#125;)<span class="hljs-comment">// 不等于 !=</span>db.teacher.find(&#123;<span class="hljs-attr">age</span>:&#123;<span class="hljs-attr">$ne</span>:<span class="hljs-number">23</span>&#125;&#125;)</code></pre><h2 id="3-包含查询"><a href="#3-包含查询" class="headerlink" title="3. 包含查询"></a>3. 包含查询</h2><pre><code class="hljs javascript"><span class="hljs-comment">// 类比mysql in</span>db.teacher.find(&#123;<span class="hljs-attr">age</span>:&#123;<span class="hljs-attr">$in</span>:[<span class="hljs-number">23</span>]&#125;&#125;)<span class="hljs-comment">//not in</span>db.teacher.find(&#123;<span class="hljs-attr">age</span>:&#123;<span class="hljs-attr">$nin</span>:[<span class="hljs-number">23</span>]&#125;&#125;)</code></pre><h2 id="4-条件连接查询"><a href="#4-条件连接查询" class="headerlink" title="4. 条件连接查询"></a>4. 条件连接查询</h2><pre><code class="hljs javascript"><span class="hljs-comment">// and 查询 &#123;$and:[&#123;&#125;,&#123;&#125;,&#123;&#125;]</span>db.teacher.find(&#123;<span class="hljs-attr">$and</span>:[&#123;<span class="hljs-attr">_id</span>:&#123;<span class="hljs-attr">$gt</span>:<span class="hljs-number">3</span>&#125;&#125;,&#123;<span class="hljs-attr">age</span>:&#123;<span class="hljs-attr">$gt</span>:<span class="hljs-number">24</span>&#125;&#125;]&#125;)<span class="hljs-comment">//id&gt;3 并且 age&gt;24</span><span class="hljs-comment">// or 查询 &#123;$or:[&#123;&#125;,&#123;&#125;,&#123;&#125;]</span>db.teacher.find(&#123;<span class="hljs-attr">$or</span>:[&#123;<span class="hljs-attr">_id</span>:&#123;<span class="hljs-attr">$gt</span>:<span class="hljs-number">3</span>&#125;&#125;,&#123;<span class="hljs-attr">age</span>:&#123;<span class="hljs-attr">$gt</span>:<span class="hljs-number">24</span>&#125;&#125;]&#125;)</code></pre><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>如果没有索引，MongoDB在执行查询的时候必须执行全集合扫描，即扫描集合中的每个文档，以选择与查询语句匹配的文档。MongoDB的索引采用B树的数据结构</p><h2 id="1-索引的类型"><a href="#1-索引的类型" class="headerlink" title="1. 索引的类型"></a>1. 索引的类型</h2><ul><li><p>单字段索引</p><p>在单个字段上按照升序或降序创建索引</p></li><li><p>复合索引</p><p>在多个字段上创建索引，并且可以指定某个字段升序或降序</p></li><li><p>其他索引</p><p>地理空间索引、文本索引、哈希索引</p></li></ul><h2 id="2-索引操作"><a href="#2-索引操作" class="headerlink" title="2. 索引操作"></a>2. 索引操作</h2><h3 id="1-查看索引"><a href="#1-查看索引" class="headerlink" title="1.查看索引"></a>1.查看索引</h3><pre><code class="hljs javascript"><span class="hljs-comment">// 获取索引 以数据形式返回</span>db.teacher.getIndex();<span class="hljs-comment">// 返回结果</span>[&#123;<span class="hljs-string">&quot;v&quot;</span> : <span class="hljs-number">2</span>,  <span class="hljs-comment">// 索引版本</span><span class="hljs-string">&quot;key&quot;</span> : &#123; <span class="hljs-comment">// 索引的字段</span><span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-number">1</span>  <span class="hljs-comment">// 以 _id 为索引 按升序排序</span>&#125;,<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;_id_&quot;</span>, <span class="hljs-comment">// 索引名字</span><span class="hljs-string">&quot;ns&quot;</span> : <span class="hljs-string">&quot;articledb.teacher&quot;</span> <span class="hljs-comment">//命名空间</span>&#125;]</code></pre><h3 id="2-创建索引"><a href="#2-创建索引" class="headerlink" title="2.创建索引"></a>2.创建索引</h3><pre><code class="hljs javascript"><span class="hljs-comment">// db.teacher.createIndex(keys,options);</span><span class="hljs-comment">// 创建单字段索引</span>db.class.createIndex(&#123;<span class="hljs-attr">classid</span>:<span class="hljs-number">1</span>&#125;)<span class="hljs-comment">//获取索引</span>[&#123;<span class="hljs-string">&quot;v&quot;</span> : <span class="hljs-number">2</span>,<span class="hljs-string">&quot;key&quot;</span> : &#123;<span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-number">1</span>&#125;,<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;_id_&quot;</span>,<span class="hljs-string">&quot;ns&quot;</span> : <span class="hljs-string">&quot;articledb.class&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;v&quot;</span> : <span class="hljs-number">2</span>,<span class="hljs-string">&quot;key&quot;</span> : &#123;<span class="hljs-string">&quot;classid&quot;</span> : <span class="hljs-number">1</span>&#125;,<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;classid_1&quot;</span>,<span class="hljs-comment">//默认索引名称加排序方式</span><span class="hljs-string">&quot;ns&quot;</span> : <span class="hljs-string">&quot;articledb.class&quot;</span>&#125;]<span class="hljs-comment">// 创建复合索引</span>db.class.createIndex(&#123;<span class="hljs-attr">classid</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;class_name_index&quot;</span>&#125;)<span class="hljs-comment">//获取索引</span>[&#123;<span class="hljs-string">&quot;v&quot;</span> : <span class="hljs-number">2</span>,<span class="hljs-string">&quot;key&quot;</span> : &#123;<span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-number">1</span>&#125;,<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;_id_&quot;</span>,<span class="hljs-string">&quot;ns&quot;</span> : <span class="hljs-string">&quot;articledb.class&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;v&quot;</span> : <span class="hljs-number">2</span>,<span class="hljs-string">&quot;key&quot;</span> : &#123;<span class="hljs-string">&quot;classid&quot;</span> : <span class="hljs-number">1</span>&#125;,<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;classid_1&quot;</span>,<span class="hljs-string">&quot;ns&quot;</span> : <span class="hljs-string">&quot;articledb.class&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;v&quot;</span> : <span class="hljs-number">2</span>,<span class="hljs-string">&quot;key&quot;</span> : &#123;<span class="hljs-string">&quot;classid&quot;</span> : <span class="hljs-number">1</span>,<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-number">-1</span>&#125;,<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;class_name_index&quot;</span>,<span class="hljs-comment">//指定的索引名称</span><span class="hljs-string">&quot;ns&quot;</span> : <span class="hljs-string">&quot;articledb.class&quot;</span>&#125;]</code></pre><h3 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="3. 删除索引"></a>3. 删除索引</h3><pre><code class="hljs javascript"><span class="hljs-comment">// 语法 db.class.dropIndex(name); 可以根据名称去删  也可以根据具体的索引字段去删除</span>db.class.dropIndex(&#123;<span class="hljs-attr">classid</span>:<span class="hljs-number">1</span>&#125;);db.class.dropIndex(<span class="hljs-string">&quot;class_name_index&quot;</span>);<span class="hljs-comment">// 删除所有索引</span>db.class.dropIndexes();</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vagrant虚拟机管理</title>
    <link href="/2020/10/02/Vagrant%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%A1%E7%90%86/"/>
    <url>/2020/10/02/Vagrant%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Vagrant"><a href="#什么是Vagrant" class="headerlink" title="什么是Vagrant"></a>什么是Vagrant</h1><p><strong>Vagrant</strong>是用来帮助我们创建一个虚拟环境的（感觉有点像docker），它是建立在VMware、VirtualBox等虚拟化工具之上的一个工具，用于将我们从不断安装虚拟机系统中解放出来。它在底层还是利用了虚拟化工具提供的命令行工具，</p><p>在使用该工具之前我们如果要安装一个虚拟机，可能要如下步骤：</p><ol><li>下载镜像</li><li>在VirtualBox中安装，配置硬件信息</li><li>进行相关的配置</li></ol><p>使用Vagrant我们只需要如下步骤：</p><pre><code class="hljs shell">vagrant init centos/7vagrant up</code></pre><h1 id="通过-Vagrant-创建一个虚拟机"><a href="#通过-Vagrant-创建一个虚拟机" class="headerlink" title="通过 Vagrant 创建一个虚拟机"></a>通过 Vagrant 创建一个虚拟机</h1><h3 id="1-安装Vagrant"><a href="#1-安装Vagrant" class="headerlink" title="1. 安装Vagrant"></a>1. 安装Vagrant</h3><p>因为Vagrant需要依赖虚拟化工具，所以我们需要先安装<a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>,然后安装<a href="https://www.vagrantup.com/downloads.html">Vagrant</a>。安装都很简单，直接下一步就可以。</p><p>安装完成在命令行中执行<code>vagrant -v</code>测试是否安装成功。</p><h3 id="2-安装一个虚拟机"><a href="#2-安装一个虚拟机" class="headerlink" title="2. 安装一个虚拟机"></a>2. 安装一个虚拟机</h3><p>注意：执行init的目录要和up的目录为同一目录。</p><p><code>vagrant init centos/7</code> 的目的是创建<strong>Vagrantfile</strong>， 该文件是虚拟机的配置文件</p><p><code>vagrant up</code> 根据当前目录下的vagrantfile启动一个虚拟机</p><p><img src="https://img.yeziup.com/img/install.png" alt="install"></p><h3 id="3-进入虚拟机"><a href="#3-进入虚拟机" class="headerlink" title="3. 进入虚拟机"></a>3. 进入虚拟机</h3><p>通过运行<code>vagrant ssh</code>可以进入虚拟机，默认的登录用户为vagrant，其实在上图的启动日志中我们也可以看到Vagrant帮我们创建了一个用户vagrant，并且生成了ssh的秘钥。</p><p>root的密码为vagrant</p><p><img src="https://img.yeziup.com/img/ssh.png" alt="ssh"></p><p>这时候我们打开VirtualBox,也可以看到我们当前启动的虚拟机。</p><p><img src="https://img.yeziup.com/img/virtualbox.png" alt="virtualbox"></p><h3 id="4-停止虚拟机"><a href="#4-停止虚拟机" class="headerlink" title="4. 停止虚拟机"></a>4. 停止虚拟机</h3><p>可以直接在VirtualBox中停止，也可以执行命令<code>vagrant halt</code>。</p><h1 id="Vagrantfile"><a href="#Vagrantfile" class="headerlink" title="Vagrantfile"></a>Vagrantfile</h1><h3 id="1-Vagrantfile配置"><a href="#1-Vagrantfile配置" class="headerlink" title="1. Vagrantfile配置"></a>1. Vagrantfile配置</h3><pre><code class="hljs ruby"><span class="hljs-comment"># -*- mode: ruby -*-</span><span class="hljs-comment"># vi: set ft=ruby :</span><span class="hljs-comment"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span><span class="hljs-comment"># configures the configuration version (we support older styles for</span><span class="hljs-comment"># backwards compatibility). Please don&#x27;t change it unless you know what</span><span class="hljs-comment"># you&#x27;re doing.</span>Vagrant.configure(<span class="hljs-string">&quot;2&quot;</span>) <span class="hljs-keyword">do</span> <span class="hljs-params">|config|</span>  <span class="hljs-comment"># The most common configuration options are documented and commented below.</span>  <span class="hljs-comment"># For a complete reference, please see the online documentation at</span>  <span class="hljs-comment"># https://docs.vagrantup.com.</span>  <span class="hljs-comment"># Every Vagrant development environment requires a box. You can search for</span>  <span class="hljs-comment"># boxes at https://vagrantcloud.com/search.</span>  <span class="hljs-comment"># 指定用的box</span>  config.vm.box = <span class="hljs-string">&quot;centos/7&quot;</span>  <span class="hljs-comment"># Disable automatic box update checking. If you disable this, then</span>  <span class="hljs-comment"># boxes will only be checked for updates when the user runs</span>  <span class="hljs-comment"># `vagrant box outdated`. This is not recommended.</span>  <span class="hljs-comment"># config.vm.box_check_update = false</span>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span>  <span class="hljs-comment"># within the machine from a port on the host machine. In the example below,</span>  <span class="hljs-comment"># accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span>  <span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> This will enable public access to the opened port</span>  <span class="hljs-comment"># 设置端口转发</span>  <span class="hljs-comment"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span>  <span class="hljs-comment"># Create a forwarded port mapping which allows access to a specific port</span>  <span class="hljs-comment"># within the machine from a port on the host machine and only allow access</span>  <span class="hljs-comment"># via 127.0.0.1 to disable public access</span>  <span class="hljs-comment"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080, host_ip: &quot;127.0.0.1&quot;</span>  <span class="hljs-comment"># Create a private network, which allows host-only access to the machine</span>  <span class="hljs-comment"># using a specific IP.</span>  <span class="hljs-comment"># 配置网络环境</span>  <span class="hljs-comment"># config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span>  config.vm.network <span class="hljs-string">&quot;private_network&quot;</span>, <span class="hljs-symbol">ip:</span> <span class="hljs-string">&quot;192.168.56.2&quot;</span>  <span class="hljs-comment"># Create a public network, which generally matched to bridged network.</span>  <span class="hljs-comment"># Bridged networks make the machine appear as another physical device on</span>  <span class="hljs-comment"># your network.</span>  <span class="hljs-comment"># 桥接方式</span>  <span class="hljs-comment"># config.vm.network &quot;public_network&quot;</span>  <span class="hljs-comment"># Share an additional folder to the guest VM. The first argument is</span>  <span class="hljs-comment"># the path on the host to the actual folder. The second argument is</span>  <span class="hljs-comment"># the path on the guest to mount the folder. And the optional third</span>  <span class="hljs-comment"># argument is a set of non-required options.</span>  <span class="hljs-comment"># 设置共享目录 默认是用virtual box，只在启动时挂载</span>  <span class="hljs-comment"># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span>  <span class="hljs-comment"># 使用 nfs 这样可以实时同步 type:&quot;nfs&quot;</span>  <span class="hljs-comment"># config.vm.synced_folder &quot;.&quot;, &quot;/vagrant&quot;,type:&quot;nfs&quot;</span>  <span class="hljs-comment"># Provider-specific configuration so you can fine-tune various</span>  <span class="hljs-comment"># backing providers for Vagrant. These expose provider-specific options.</span>  <span class="hljs-comment"># Example for VirtualBox:</span>  <span class="hljs-comment">#</span>  <span class="hljs-comment"># config.vm.provider &quot;virtualbox&quot; do |vb|</span>  <span class="hljs-comment">#   # Display the VirtualBox GUI when booting the machine</span>  <span class="hljs-comment">#   vb.gui = true</span>  <span class="hljs-comment">#</span>  <span class="hljs-comment">#   # Customize the amount of memory on the VM:</span>  <span class="hljs-comment">#   vb.memory = &quot;1024&quot;</span>  <span class="hljs-comment"># end</span>  <span class="hljs-comment">#</span>  <span class="hljs-comment"># View the documentation for the provider you are using for more</span>  <span class="hljs-comment"># information on available options.</span>  config.vm.provider <span class="hljs-string">&quot;virtualbox&quot;</span> <span class="hljs-keyword">do</span> <span class="hljs-params">|vb|</span>    <span class="hljs-comment"># Display the VirtualBox GUI when booting the machine</span>    <span class="hljs-comment"># vb.gui = true</span>        <span class="hljs-comment"># 设置虚拟机名称 也可指定其他信息 例如下边的指定内存</span>    vb.name = <span class="hljs-string">&quot;centos7&quot;</span>    <span class="hljs-comment"># Customize the amount of memory on the VM:</span>    <span class="hljs-comment"># vb.memory = &quot;1024&quot;</span>  <span class="hljs-keyword">end</span>  <span class="hljs-comment"># Enable provisioning with a shell script. Additional provisioners such as</span>  <span class="hljs-comment"># Ansible, Chef, Docker, Puppet and Salt are also available. Please see the</span>  <span class="hljs-comment"># documentation for more information about their specific syntax and use.</span>  <span class="hljs-comment"># config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span>  <span class="hljs-comment">#   apt-get update</span>  <span class="hljs-comment">#   apt-get install -y apache2</span>  <span class="hljs-comment"># SHELL</span><span class="hljs-keyword">end</span></code></pre><h3 id="2-重启虚拟机"><a href="#2-重启虚拟机" class="headerlink" title="2. 重启虚拟机"></a>2. 重启虚拟机</h3><p>执行 <code>vagrant reload</code>,注意要在执行<code>vagrant init</code>的目录中执行</p>]]></content>
    
    
    <categories>
      
      <category>Virtual</category>
      
    </categories>
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
